import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DQhFOUgs.js";const p={},e=t(`<p><a href="#apelsini">Apelsīni</a></p><p><a href="#armstr">Ārmstronga skaitlis</a></p><h3 id="apelsini" tabindex="-1"><a class="header-anchor" href="#apelsini"><span>Apelsīni <a id="apelsini"></a></span></a></h3><p>Dotajā piemērā programma prasa ievadīt apelsīnu cenu un naudas bilanci, un aprēķina, cik pilnus kg apelsīnu var nopirkt, kā arī parāda naudas atlikumu.</p><p>Tā kā nepieciešams zināt tikai pilnus kg apelsīnu, tad f-ja atgriež tikai veselo daļu no rezultāta.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">aprekinaDaudzumu</span><span class="token punctuation">(</span><span class="token keyword">float</span> cena<span class="token punctuation">,</span> <span class="token keyword">float</span> kapitals<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> daudzums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>kapitals <span class="token operator">&gt;=</span> cena<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        daudzums <span class="token operator">=</span> kapitals <span class="token operator">/</span> cena<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span> 
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Nepietiek naudas!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> daudzums<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> cena<span class="token punctuation">,</span> kapitals<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Ievadi cenu kilogramam apelsīnu!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> cena<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Ievadi pieejamās naudas daudzumu!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> kapitals<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rezultats <span class="token operator">=</span> <span class="token function">aprekinaDaudzumu</span><span class="token punctuation">(</span>cena<span class="token punctuation">,</span> kapitals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rezultats <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">float</span> atlikums <span class="token operator">=</span> kapitals<span class="token operator">-</span>rezultats<span class="token operator">*</span>cena<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Var nopirkt &quot;</span> <span class="token operator">&lt;&lt;</span> rezultats <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; pilnus kg apelsīnu un pāri paliek &quot;</span> <span class="token operator">&lt;&lt;</span> atlikums <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; eiro.&quot;</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="armstronga-skaitlis" tabindex="-1"><a class="header-anchor" href="#armstronga-skaitlis"><span>Ārmstronga skaitlis <a id="armstr"></a></span></a></h3><p>Naturālu n ciparu skaitli sauc par Ārmstronga skaitli, ja tas sakrīt ar savu ciparu n-to pakāpju summu.</p><p>Apskatīsim programmu, kas nosaka, vai ievadītais skaitlis ir Ārmstronga skaitlis.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> sk<span class="token punctuation">,</span> summa <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Ievadi skaitli!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> sk<span class="token punctuation">;</span>
  string sk_str <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> sk_str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Pārāk liels skaitlis!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      summa <span class="token operator">+=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>sk_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>summa <span class="token operator">==</span> sk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;IR&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;NAV!&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ar <code>n</code> apzīmē ciparu skaitu ievadītajā skaitlī.</p><p>Ja ievadītais skaitlis nav garāks par 50 cipariem, sākas cikls, kurš citu pēc cita pārbauda visus ciparus.</p><p>Katru ciparu kāpina n-tajā pakāpē, izmantojot funkciju <code>pow()</code> no <code>&lt;math.h&gt;</code> bibliotēkas un rezultātu pieskaita mainīgajam <code>summa</code>.</p><p>Beigās pārbauda, vai summa ir vienāda ar ievadīto skaitli. Ja tā ir, tad skaitlis ir Ārmstronga skaitlis un programma izvada &quot;IR&quot;, citādi izvada &quot;NAV&quot;.</p>`,15),i=[e];function o(l,c){return s(),a("div",null,i)}const k=n(p,[["render",o],["__file","piemeri.html.vue"]]),d=JSON.parse('{"path":"/programmesana/c__/piemeri.html","title":"Piemēri","lang":"en-US","frontmatter":{"title":"Piemēri","description":"Apelsīni Ārmstronga skaitlis Apelsīni Dotajā piemērā programma prasa ievadīt apelsīnu cenu un naudas bilanci, un aprēķina, cik pilnus kg apelsīnu var nopirkt, kā arī parāda naud...","head":[["meta",{"property":"og:url","content":"https://prog.kmu.lv/programmesana/c__/piemeri.html"}],["meta",{"property":"og:site_name","content":"Proghelp"}],["meta",{"property":"og:title","content":"Piemēri"}],["meta",{"property":"og:description","content":"Apelsīni Ārmstronga skaitlis Apelsīni Dotajā piemērā programma prasa ievadīt apelsīnu cenu un naudas bilanci, un aprēķina, cik pilnus kg apelsīnu var nopirkt, kā arī parāda naud..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Kristaps Muižnieks"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Piemēri\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kristaps Muižnieks\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":3,"title":"Apelsīni","slug":"apelsini","link":"#apelsini","children":[]},{"level":3,"title":"Ārmstronga skaitlis","slug":"armstronga-skaitlis","link":"#armstronga-skaitlis","children":[]}],"git":{},"readingTime":{"minutes":0.96,"words":288},"filePathRelative":"programmesana/c++/piemeri.md","autoDesc":true}');export{k as comp,d as data};
