import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,b as e}from"./app-DQhFOUgs.js";const t="/cpp_function.png",i={},p=e(`<h3 id="funkcijas" tabindex="-1"><a class="header-anchor" href="#funkcijas"><span>Funkcijas</span></a></h3><p>Jebkurai C++ programmai ir galvenā <strong>main()</strong> funkcija, kas satur programmas kodu.</p><p>Ja visu kodu rakstīs vienā funkcijā, kods būs nepārskatāms un grūti lasāms, tāpēc kodu sadala atsevišķās funkcijās un katra no tām veic (realizē) savu konkrēto uzdevumu.</p><h3 id="funkcijas-deklaracija" tabindex="-1"><a class="header-anchor" href="#funkcijas-deklaracija"><span>Funkcijas deklarācija</span></a></h3><p>C++ valodā funkcijas deklarē divējādi:</p><ul><li>prototips, tad izsaukums, tad realizācija</li><li>realizācija, tad izsaukums</li></ul><p>Funkciju pieraksta sekojoši:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>datu<span class="token operator">-</span>tips <span class="token function">nosaukums</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//f-jas realizācija</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Deklarācijas sākumā raksta atgriežamās vērtības datu tipu. Tie var būt <code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, <code>string</code> un <code>bool</code>.</p><p>Ja funkcija vērtību neatgriež, norāda tukšo datu tipu <code>void</code>!</p><h3 id="funkcija-bez-parametriem" tabindex="-1"><a class="header-anchor" href="#funkcija-bez-parametriem"><span>Funkcija bez parametriem</span></a></h3><p>Apskatīsim piemēru...</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>
<span class="token keyword">void</span> <span class="token function">vaiLielaksPar10</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Lielāks par 10!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Nav lielāks par 10!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> skaitlis<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> skaitlis<span class="token punctuation">;</span>
    <span class="token function">vaiLielaksPar10</span><span class="token punctuation">(</span>skaitlis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Šajā piemērā funkcija pati izdrukā ekrānā rezultātu un neko neatgriež, tāpēc f-jas deklarācijā raksta <code>void</code>.</p><h3 id="funkcija-ar-parametriem" tabindex="-1"><a class="header-anchor" href="#funkcija-ar-parametriem"><span>Funkcija ar parametriem</span></a></h3><p>Funkcija šajā gadījumā ir kā mehānisms, kas saņem datus, tos apstrādā un atgriež rezultātu.</p><p><img src="`+t+`" alt="cpp_funkcija"> Izmantotais attēls: en.wikipedia.org</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>
<span class="token keyword">int</span> <span class="token function">saskaitisana</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sk1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> sk2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> summa <span class="token operator">=</span> <span class="token function">saskaitisana</span><span class="token punctuation">(</span>sk1<span class="token punctuation">,</span> sk2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> summa <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sk1</code> un <code>sk2</code> šajā gadījumā ir argumenti, kurus padodam funkcijai, kura tos saņem kā parametrus <code>a</code> un <code>b</code>.</p><p>Var teikt, ka parametri pārmanto argumentu vērtības.</p><p>Mainīgais <code>summa</code> saņem funkcijas atgriezto rezultātu <code>c</code>.</p><p>Mainīgais, kas deklarēts funkcijā, ārpus tās neeksistē!</p>`,22),c=[p];function o(r,u){return n(),s("div",null,c)}const d=a(i,[["render",o],["__file","funkcijas.html.vue"]]),m=JSON.parse('{"path":"/programmesana/c__/funkcijas.html","title":"Funkcijas","lang":"en-US","frontmatter":{"title":"Funkcijas","description":"Funkcijas Jebkurai C++ programmai ir galvenā main() funkcija, kas satur programmas kodu. Ja visu kodu rakstīs vienā funkcijā, kods būs nepārskatāms un grūti lasāms, tāpēc kodu s...","head":[["meta",{"property":"og:url","content":"https://prog.kmu.lv/programmesana/c__/funkcijas.html"}],["meta",{"property":"og:site_name","content":"Proghelp"}],["meta",{"property":"og:title","content":"Funkcijas"}],["meta",{"property":"og:description","content":"Funkcijas Jebkurai C++ programmai ir galvenā main() funkcija, kas satur programmas kodu. Ja visu kodu rakstīs vienā funkcijā, kods būs nepārskatāms un grūti lasāms, tāpēc kodu s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://prog.kmu.lv/cpp_function.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Kristaps Muižnieks"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Funkcijas\\",\\"image\\":[\\"https://prog.kmu.lv/cpp_function.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kristaps Muižnieks\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":3,"title":"Funkcijas","slug":"funkcijas","link":"#funkcijas","children":[]},{"level":3,"title":"Funkcijas deklarācija","slug":"funkcijas-deklaracija","link":"#funkcijas-deklaracija","children":[]},{"level":3,"title":"Funkcija bez parametriem","slug":"funkcija-bez-parametriem","link":"#funkcija-bez-parametriem","children":[]},{"level":3,"title":"Funkcija ar parametriem","slug":"funkcija-ar-parametriem","link":"#funkcija-ar-parametriem","children":[]}],"git":{},"readingTime":{"minutes":0.78,"words":235},"filePathRelative":"programmesana/c++/funkcijas.md","autoDesc":true}');export{d as comp,m as data};
