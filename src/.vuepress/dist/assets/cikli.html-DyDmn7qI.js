import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,b as e}from"./app-DQhFOUgs.js";const i={},t=e(`<h1 id="ciklu-veidosana" tabindex="-1"><a class="header-anchor" href="#ciklu-veidosana"><span>Ciklu veidošana</span></a></h1><h2 id="nenoteiktie-while-cikli" tabindex="-1"><a class="header-anchor" href="#nenoteiktie-while-cikli"><span>Nenoteiktie while cikli</span></a></h2><p>Python progr. valodā eksistē divu veidu cikli - noteiktie(<code>for</code>) un nenoteiktie(<code>while</code>).</p><p>Piemērs nenoteiktajam.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  i <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Šajā cikla veidā ir pirms paša cikla ir dots kontroles mainīgais <code>i</code>, kurš ļauj sākumā tiek uzstādīts ar vērtību 1. Cikls sākas ar vārdiem <code>while</code> un tad ir cikla darbības ilgums jeb šajā gadījumā cikls darbojas kamēr mainīgais <code>i</code> ir mazāks nekā 6.</p><p><code>i += 1</code> šī rinda ir svarīgākā šajā ciklā, jo tiek pateikts, ka cikla vērtība <code>i</code> tiek palielināta par vienu vienību.</p><h2 id="noteiktie-for-cikli" tabindex="-1"><a class="header-anchor" href="#noteiktie-for-cikli"><span>Noteiktie for cikli</span></a></h2><p>Piemērs noteiktajam.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Tiek iestatīts cikla mainīgais <code>x</code>, kurš sevī satur cikla skaitītāju. <code>in range(6)</code> - cikla ilgums. Programmai tiek teikts, ka darbojas līdz sasniedz vērtību 6.</p><p>Cikla gala vērtība būs par vienu mazāka nekā tiek norādīts. Ja cikla gala vērtība tiek norādīta kā range(6), tad pēdējā cikla vienība būs 5.</p><p><code>range(1, 10, 2)</code> - komanda mums ļauj arī nodefinēt cikla soli un sākuma vērtību. Pirmā vērtība <code>1</code> pasaka, ka cikls sākas ar vērtību 1, tad <code>10</code> norāda uz cikla beigām un <code>2</code> ir cikla solis, cikls iet uz priekšu pa 2 vienībām.</p><div class="language-tip line-numbers-mode" data-ext="tip" data-title="tip"><pre class="language-tip"><code>range(sākums,beigas,solis)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Minimums šai komandai ir beigu viena vērtība, kura parādīs, kad ir cikla beigas.</p><p>Pielietojot negatīvu soli ciklu iespējams darbināt arī atpakaļgaitā.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Šajā gadījumā izdrukāsies skaitļi:</p><div class="language-tip line-numbers-mode" data-ext="tip" data-title="tip"><pre class="language-tip"><code>10 9 8 7 6 5 4 3 2 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ciklu-veidosana-saraksti" tabindex="-1"><a class="header-anchor" href="#ciklu-veidosana-saraksti"><span>Ciklu veidošana - saraksti</span></a></h2><p>Ir iespējams arī iegūt saraksta vērtības izmantojot noteikto ciklu.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>stundas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Pirmā stunda&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Otrā stunda&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Trešā stunda&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> stundas<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Šajā gadījumā mainīgais <code>x</code> saturēs tā brīža saraksta vērtību. Piemēram, pirmo reizi tas saturēs vārdus <code>Pirmā stunda</code> otrajā <code>Otrā stunda</code> un trešājā <code>Trešā stunda</code>.</p><p>Nedaudz grūtāk ir ar vārdnīcām.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>vardnica <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span> 
<span class="token keyword">for</span> atslega<span class="token punctuation">,</span> vertiba <span class="token keyword">in</span> vardnica<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>atslega<span class="token punctuation">,</span> <span class="token string">&#39; tās vērtība &#39;</span><span class="token punctuation">,</span> vertiba<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pirmajā rindā ir definēta vārdnīca.</p><p>Otrā rinda ir noteiktais cikls. <code>atslega</code> sevī satur vārdnīcas atslēgu konkrētājā cikla solī,piemēram, <code>x</code>,<code>y</code>,<code>z</code>.<code>in vardnica.items()</code> - cikls tiek lasīts caur vardnīcas elementiem. <code>print(atslega, &#39; tās vērtība &#39;, vertiba)</code> - <code>atslega</code> sevī satur vārdnīcas atslēgu un <code>vertiba</code> vērtību.</p>`,27),o=[t];function p(c,l){return n(),s("div",null,o)}const k=a(i,[["render",p],["__file","cikli.html.vue"]]),u=JSON.parse('{"path":"/programmesana/python/cikli.html","title":"Cikli","lang":"en-US","frontmatter":{"title":"Cikli","description":"Ciklu veidošana Nenoteiktie while cikli Python progr. valodā eksistē divu veidu cikli - noteiktie(for) un nenoteiktie(while). Piemērs nenoteiktajam. Šajā cikla veidā ir pirms pa...","head":[["meta",{"property":"og:url","content":"https://prog.kmu.lv/programmesana/python/cikli.html"}],["meta",{"property":"og:site_name","content":"Proghelp"}],["meta",{"property":"og:title","content":"Cikli"}],["meta",{"property":"og:description","content":"Ciklu veidošana Nenoteiktie while cikli Python progr. valodā eksistē divu veidu cikli - noteiktie(for) un nenoteiktie(while). Piemērs nenoteiktajam. Šajā cikla veidā ir pirms pa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Kristaps Muižnieks"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cikli\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kristaps Muižnieks\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"Nenoteiktie while cikli","slug":"nenoteiktie-while-cikli","link":"#nenoteiktie-while-cikli","children":[]},{"level":2,"title":"Noteiktie for cikli","slug":"noteiktie-for-cikli","link":"#noteiktie-for-cikli","children":[]},{"level":2,"title":"Ciklu veidošana - saraksti","slug":"ciklu-veidosana-saraksti","link":"#ciklu-veidosana-saraksti","children":[]}],"git":{},"readingTime":{"minutes":1.23,"words":368},"filePathRelative":"programmesana/python/cikli.md","autoDesc":true}');export{k as comp,u as data};
