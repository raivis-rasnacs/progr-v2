import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,b as t}from"./app-DQhFOUgs.js";const e={},i=t(`<h1 id="funkciju-veidi-pec-to-darbibas-veidiem" tabindex="-1"><a class="header-anchor" href="#funkciju-veidi-pec-to-darbibas-veidiem"><span>Funkciju veidi pēc to darbības veidiem</span></a></h1><p>Javascript programmēšanas valodā ir iespējams definēt funcijas, lai universālu kodu izmantotu atkārtoti.</p><p>Funkcijas var veikt divu veidu darbības.</p><ol><li>Veikt darbību un neko neatgriezt atpakaļ, piemēram, nomaina lapai fonu.</li><li>Veikt darbību un atgriezt kādu vērtībum,piemēram, aprēķināt skaitli, tad izmanto vārdu <code>return</code>.</li></ol><h1 id="funkciju-lietojums" tabindex="-1"><a class="header-anchor" href="#funkciju-lietojums"><span>Funkciju lietojums</span></a></h1><p>Funkcijas sāk rakstīt ar vārdu <code>function</code>, tad seko funkcijas nosaukums un iekavās tās parametri.</p><p>Svarīgi! Nosaucot funkcijas, nedrīkst lietot: garumzīmes, mīkstinājuma zīmes, atstarpes. Funkcijas ir reģistrjūtīgas(lielie un mazie burti ir svarīgi).</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">nosaukums</span><span class="token punctuation">(</span> <span class="token parameter"><span class="token constant">MAIN</span>Ī<span class="token constant">GAIS</span><span class="token punctuation">,</span> <span class="token constant">MAIN</span>Ī<span class="token constant">GAIS</span><span class="token punctuation">,</span> <span class="token constant">MAIN</span>Ī<span class="token constant">GAIS</span> utt<span class="token punctuation">.</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token comment">// DARBĪBA</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ja funkcijas darbības rezultātā ir jāatgriež vērtība, tad lieto <code>return</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter"><span class="token constant">MAIN</span>Ī<span class="token constant">GAIS</span><span class="token punctuation">,</span> <span class="token constant">MAIN</span>Ī<span class="token constant">GAIS</span><span class="token punctuation">,</span> <span class="token constant">MAIN</span>Ī<span class="token constant">GAIS</span> utt<span class="token punctuation">.</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">return</span> vērtība<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Apskatīsim funkcijas piemēru. Funkcijai <code>saskaiti</code> tiek padoti līdzi divi parametri kā funkcijas argumenti, kuri jāsaskaita un jāatgriež atpakaļ to summa. Funckijas argumenti nosaukti kā <code>a</code> un <code>b</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token keyword">function</span> <span class="token function">saskaiti</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">saskaiti</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tiek izsaukta funkcija</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ar rindas <code>saskaiti(1,2);</code> palīdzību, tiek izsaukta funkcija <code>saskaiti</code> un tās argumentos līdzi iedoti skaitļi <code>1</code> un <code>2</code>. Tā kā rezultāts netiek ielādēts vai izdrukāts lapā, tad rezultāts nav vizuāli redzams.</p><p>Lai iegūtu redzamu rezultātu, piesaistīsim funkcijas rezultātam mainīgo.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token keyword">function</span> <span class="token function">saskaiti</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> rezultaats <span class="token operator">=</span> <span class="token function">saskaiti</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tiek izsaukta funkcija</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rezultaats<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mainīgajā <code>rezultaats</code> tiek ielādēts funkcijas <code>saskaiti(1,2)</code> izpildes iznākums.</p><p>Otrs piemērs ir veikt darbību funkcijā un uzreiz izvadīt tās rezultātu. Funkcijai <code>izvadi_konsolee</code> ir pievienots parametrs <code>vards</code>. Funkcijas iekšienē uzreiz tiek veikta darbība. Mainīgais, kurš ir fukcijas parametrs, tiek sasaistīts ar statisku tekstu (<code>ir iedotais funkcijas parametrs.</code>) un izvadīts konsolē. Šādā gadījumā nav vajadzīgs mainīgais, kuram piesaista funkcijas iznākumu.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token keyword">function</span> <span class="token function">izvadi_konsolee</span><span class="token punctuation">(</span><span class="token parameter">vards</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vards<span class="token operator">+</span><span class="token string">&quot; ir iedotais funkcijas parametrs.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">izvadi_konsolee</span><span class="token punctuation">(</span><span class="token string">&quot;Tests&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Izvade: Tests ir iedotais funkcijas parametrs.</span>

<span class="token function">izvadi_konsolee</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Izvade: 1234 ir iedotais funkcijas parametrs.</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),p=[i];function c(o,u){return n(),s("div",null,p)}const d=a(e,[["render",c],["__file","funkcijas.html.vue"]]),k=JSON.parse('{"path":"/programmesana/js/funkcijas.html","title":"Funkcijas","lang":"en-US","frontmatter":{"title":"Funkcijas","description":"Funkciju veidi pēc to darbības veidiem Javascript programmēšanas valodā ir iespējams definēt funcijas, lai universālu kodu izmantotu atkārtoti. Funkcijas var veikt divu veidu da...","head":[["meta",{"property":"og:url","content":"https://prog.kmu.lv/programmesana/js/funkcijas.html"}],["meta",{"property":"og:site_name","content":"Proghelp"}],["meta",{"property":"og:title","content":"Funkcijas"}],["meta",{"property":"og:description","content":"Funkciju veidi pēc to darbības veidiem Javascript programmēšanas valodā ir iespējams definēt funcijas, lai universālu kodu izmantotu atkārtoti. Funkcijas var veikt divu veidu da..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Kristaps Muižnieks"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Funkcijas\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kristaps Muižnieks\\",\\"url\\":\\"\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.02,"words":306},"filePathRelative":"programmesana/js/funkcijas.md","autoDesc":true}');export{d as comp,k as data};
